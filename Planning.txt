OOP principles in Rock, Paper, Scissors game:

Inheritance:
-Player Class (Abstract Class): Represents a player in the game and serves as the base class for other player types. It embodies inheritance by defining common attributes and methods that are shared by both human and computer players.
-HumanPlayer Class (Subclass of Player): Inherits from the Player class, allowing it to reuse the attributes and methods defined in the Player class while also providing the flexibility to override or extend these methods.
-ComputerPlayer Class (Subclass of Player): Similarly inherits from the Player class, leveraging the common player attributes and methods.

Encapsulation:
-Player Class (Abstract Class): Encapsulates player-specific data (e.g., wins, losses, points) by providing private fields and exposing them through getter and setter methods. This ensures that the internal state of players is hidden and can only be accessed and modified through controlled methods.
-Validator Class (Utility Class): Encapsulates input validation logic by providing methods to validate user input. This hides the validation details from the calling code and promotes code maintainability.

Polymorphism:
-Player Class (Abstract Class): Serves as a base class for different player types (human and computer). This enables polymorphism, as you can create objects of different player types but interact with them through a common Player reference, allowing for flexibility and extensibility in the game logic.
-HumanPlayer Class and ComputerPlayer Class: Both classes provide specific implementations of methods defined in the Player class, showcasing polymorphism in action. For example, they can override the makeMove() method differently to represent human and computer player behaviors.

Modularity:
-com.generalassmbly.GameManager Class (Service/Controller Class): Centralizes game logic, including move comparison and outcome determination. This modular approach separates the game's core functionality from other concerns, promoting easier maintenance and testing.
-GameMenu Class (Service/Controller Class): Manages the main menu and user interaction separately. By isolating menu-related logic, you ensure that the user interface is decoupled from the game mechanics, enhancing modularity.


Class List

## Class List

1. **Main:** The main class containing the main method for running the game.

2. **Player:** An abstract class representing a player in the game. This class should include common attributes and methods for players.

3. **HumanPlayer:** A subclass of Player representing a human player.

4. **ComputerPlayer:** A subclass of Player representing a computer player.

5. **GameHistory:** A utility class for managing the history of the game and storing past game results.

6. **Validator:** A utility class for handling input validation and providing methods to validate user input.

7. **com.generalassmbly.GameManager:** A service or controller class responsible for managing the game mechanics, including comparing moves, determining the winner, and handling game outcomes.

8. **GameMenu:** A service or controller class for managing the main menu and user interactions, such as displaying options and handling user choices.

9. **App:** Another main class that serves as the entry point of the program. It initializes the game, creates objects, and starts the game loop.

[Step By Step]

Create Main: Entry Point

Create Player class: is an abstract class that serves as the base class for all player types in the Rock, Paper, Scissors gam

Create Player Subclasses (HumanPlayer and ComputerPlayer):

You've mentioned that you want two types of players: human and computer. Create two subclasses of the Player class, one for each player type. These subclasses will inherit from the Player class and implement the makeMove() method differently for human and computer players.
Create GameHistory Class:

Create the GameHistory class, which will be responsible for managing the history of the game. This class should have methods for recording game results, such as wins and losses.
Create Validator Class:

Implement the Validator class, which handles input validation. This class should provide methods to validate user input, ensuring that it's a valid move or menu choice.
Create com.generalassmbly.GameManager Class:

Develop the com.generalassmbly.GameManager class, which manages the core game logic. This class should handle comparing moves, determining the winner, updating player scores, and handling game outcomes.
Create GameMenu Class:

Create the GameMenu class, responsible for managing the main menu and user interactions. This class should have methods for displaying the main menu, getting user choices, and handling user interactions.
Create App Class (Client/Driver Class):

In the main method of the App class, create instances of the necessary classes, including Player, GameHistory, Validator, com.generalassmbly.GameManager, and GameMenu. This class will serve as the entry point of your program and will orchestrate the game flow.
Define Enums (Data Definitions):

Define enums for constants like moves (rock, paper, scissors) and game results (win, lose, tie). These enums can be used throughout the code to represent these constants.
Implement the Logic and Gameplay:

Implement the specific logic for making moves, determining winners, and managing the game flow in the respective classes. This includes the makeMove() method for human and computer players and the core game logic in the com.generalassmbly.GameManager class.
Implement Input Validation:

In the Validator class, implement methods for input validation to ensure that user inputs for moves or menu choices are validated correctly.
Implement the Main Menu Loop:

In the main method of the App class, create a loop that displays the main menu, gets user input, and directs the program based on user choices.
Testing and Exception Handling:

As you implement each component, consider writing unit tests to ensure that they work as expected. Also, add exception handling using try-catch blocks to gracefully handle bad input or other errors.
Document Your Code:

Add JavaDoc comments to your classes, methods, and variables to document their purpose and usage. Also, add inline comments to explain the logic within your code.
Ensure Code Organization:

Organize your code into packages and classes as necessary. Use proper naming conventions and maintain a clean and structured codebase.
Commit and Version Control:

Commit your code changes to version control (e.g., Git) regularly with meaningful commit messages to track your progress and maintain a history of your work.
Run and Test Your Game:

Run your program and test it to ensure that it works correctly. Debug and fix any issues that you encounter during testing.
Iterate and Refine:

